package main

import (
	"bytes"
	"context"
	"crypto/rand"
	"encoding/json"
	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p-core/crypto"
	"github.com/libp2p/go-libp2p-core/host"
	"github.com/multiformats/go-multiaddr"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"io/ioutil"
	"net/http"
	"strings"
)

//	{
//		"ip": "1.2.3.4",
//		"port": "12345",
//		"multiaddr": "0sCFajniCW92aP1fHm49RAhyrKC6uXVj"
//	}
type trackerAnnounceRequest struct {
	IP        string `json:"ip"`
	Port      string `json:"port"`
	Multiaddr string `json:"multiaddr"`
}

//	{
//		"action": "announceReceived",
//	 	"data": {
//			"shareId": "1AbhoECj"
//		}
//	}
type trackerAnnounceResponse struct {
	ShareID string `json:"shareId"`
}

//	{
//		"override": true,
//		"ip": "1.2.3.4",
//		"port": "12345",
//		"multiaddr": "0sCFajniCW92aP1fHm49RAhyrKC6uXVj"
//	}
type trackerPulseRequest struct {
	Override  *bool   `json:"override,omitempty"`
	IP        *string `json:"ip,omitempty"`
	Port      *string `json:"port,omitempty"`
	Multiaddr *string `json:"multiaddr,omitempty"`
	ShareID   *bool   `json:"shareId,omitempty"`
}

//	{
//		"action": "pulseReceived",
//		"data": true
//	}
type trackerPulseResponse struct {
	Status 		string `json:"status"`
	Overriden   *bool  `json:"overriden"`
}

//	{
//		"shareId": "0sCFajniCW92aP1fHm49RAhyrKC6uXVj",
//		"multiaddr": "/ip4/0.0.0.0/tcp/8080/p2p/0sCFajniCW92aP1fHm49RAhyrKC6uXVj"
//	}
type trackerPushRequest struct {
	Multiaddr string `json:"multiaddr"`
	ShareID   string `json:"shareId"`
}

//	{
//		"multiaddr": "/ip4/0.0.0.0/tcp/8080/p2p/0sCFajniCW92aP1fHm49RAhyrKC6uXVj"
//	}
type trackerPushResponse struct {
	Multiaddr string `json:"multiaddr"`
}

// Sobani Peer
type sobaniPeer struct {
	IP         string
	Port       string
	Multiaddr  string
	TrackerURL string
	Host       *host.Host
}

// Creates a new sobani peer
func newSobaniPeer(trackerURL *string) (*sobaniPeer, error) {
	peer := &sobaniPeer{}
	peer.TrackerURL = *trackerURL

	// Creates a new RSA key pair for this host.
	var r = rand.Reader
	prvKey, _, err := crypto.GenerateKeyPairWithReader(crypto.RSA, 2048, r)
	if err != nil {
		panic(err)
	}

	// 0.0.0.0 will listen on any interface device.
	sourceMultiAddr, _ := multiaddr.NewMultiaddr("/ip4/0.0.0.0/tcp/0")

	// libp2p.New constructs a new libp2p Host.
	// Other options can be added here.
	host, err := libp2p.New(
		context.Background(),
		libp2p.ListenAddrs(sourceMultiAddr),
		libp2p.Identity(prvKey),
	)
	if err != nil {
		logrus.Fatal(err)
		return nil, err
	}
	peer.Host = &host

	// Set a function as stream handler.
	// This function is called when a peer connects, and starts a stream with this protocol.
	// Only applies on the receiving side.
	host.SetStreamHandler("/sobani/1.0.0", handleStream)

	// Let's get the actual TCP port from our listen multiaddr, in case we're using 0 (default; random available port).
	var port string
	for _, la := range host.Network().ListenAddresses() {
		if p, err := la.ValueForProtocol(multiaddr.P_TCP); err == nil {
			port = p
			break
		}
	}

	if port == "" {
		return nil, errors.New("was not able to find actual local port")
	}
	peer.Port = port
	peer.Multiaddr = host.ID().Pretty()

	publicIP, err := getPublicIP()
	if err != nil {
		logrus.Debug(err)
		return nil, err
	}
	peer.IP = *publicIP

	return peer, nil
}

// This function announces self to a public tracker
// It returns the corresponding share ID generated by tracker and any error encountered.
func (peer *sobaniPeer) announceToTracker() (*trackerAnnounceResponse, error) {
	logrus.Info("Announcing to tracker at: %s", peer.TrackerURL)

	request := &trackerAnnounceRequest{
		IP:        peer.IP,
		Port:      peer.Port,
		Multiaddr: peer.Multiaddr,
	}

	requestJSON, _ := json.Marshal(request)
	logrus.Debug("JSON: ", string(requestJSON))

	body, err := postToTracker(&requestJSON, &peer.TrackerURL, "/announce")
	if err != nil {
		return nil, err
	}
	logrus.Debug("response Body:", string(*body))

	res := trackerAnnounceResponse{}
	err = json.Unmarshal(*body, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// This function sends pulse to public tracker
// It returns the pulse result on tracker and any error encountered.
func (peer *sobaniPeer) pulse() (*trackerPulseResponse, error) {
	logrus.Infof("Sending pulse to tracker %s", peer.TrackerURL)

	request := &trackerPulseRequest{}

	requestJSON, _ := json.Marshal(request)
	logrus.Debug("JSON: ", string(requestJSON))

	body, err := postToTracker(&requestJSON, &peer.TrackerURL, "/pulse")
	if err != nil {
		return nil, err
	}
	logrus.Debug("response Body:", string(*body))

	res := trackerPulseResponse{}
	err = json.Unmarshal(*body, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// This function gets peer info by share ID on public tracker
// It returns the requested peer info on tracker and any error encountered.
func (peer *sobaniPeer) getPeerInfo(shareID *string) (*trackerPushResponse, error) {
	logrus.Infof("Getting peer[%s] info via %s", *shareID, peer.TrackerURL)

	request := &trackerPushRequest{
		Multiaddr: peer.Multiaddr,
		ShareID:   *shareID,
	}

	requestJSON, _ := json.Marshal(request)
	logrus.Debug("JSON: ", string(requestJSON))

	body, err := postToTracker(&requestJSON, &peer.TrackerURL, "/push")
	if err != nil {
		return nil, err
	}
	logrus.Debug("response Body:", string(*body))

	res := trackerPushResponse{}
	err = json.Unmarshal(*body, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// This function will try to get system's public IP address via ip.cip.cc
// It returns the one of public IP addresses and any error encountered.
func getPublicIP() (*string, error) {
	logrus.Info("Finding public IP address...")
	res, err := http.Get("http://ip.cip.cc/")
	if err != nil {
		logrus.Fatal(err)
		return nil, err
	}
	defer res.Body.Close()

	if res.Status != "200 OK" {
		logrus.Fatal(err)
		return nil, err
	}

	body, _ := ioutil.ReadAll(res.Body)
	ip := strings.TrimSpace(string(body))
	return &ip, nil
}

// This function will try to post data to tracker
// It returns the response from the given tracker and any error encountered.
func postToTracker(data *[]byte, trackerURL *string, endpoint string) (*[]byte, error) {
	logrus.Debugf("POST `%s` to %s/%s\n", string(*data), *trackerURL, endpoint)

	var buffer bytes.Buffer
	buffer.WriteString(*trackerURL)
	buffer.WriteString(endpoint)
	postURL := buffer.String()

	req, err := http.NewRequest("POST", postURL, bytes.NewBuffer(*data))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json;charset=utf-8")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	if resp.Status != "200 OK" {
		logrus.Error("Tracker error")
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return &body, nil
}
