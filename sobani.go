package main

import (
	"bufio"
	"bytes"
	"context"
	"crypto/rand"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p-core/crypto"
	"github.com/libp2p/go-libp2p-core/network"
	"github.com/multiformats/go-multiaddr"
	"github.com/sirupsen/logrus"
)

type trackerAnnounceRequest struct {
	IP        string `json:"ip"`
	Port      string `json:"port"`
	Multiaddr string `json:"multiaddr"`
	Action    string `json:"action"`
}

type trackerAnnounceResponseData struct {
	ShareID string `json:"shareId"`
}

type trackerAnnounceResponse struct {
	Action string                      `json:"action"`
	Data   trackerAnnounceResponseData `json:"data"`
}

type trackerPulseRequest struct {
	Action string            `json:"action"`
	Data   map[string]string `json:"data"`
}

type trackerPulseResponse struct {
	Action string `json:"action"`
}

type trackerPushRequest struct {
	ShareID string `json:"shareId"`
	Action  string `json:"action"`
}

type trackerPushResponseData struct {
	Multiaddr string `json:"multiaddr"`
}

type trackerPushResponse struct {
	Action string                  `json:"action"`
	Data   trackerPushResponseData `json:"data"`
}

func handleStream(s network.Stream) {
	logrus.Println("Got a new stream!")

	// Create a buffer stream for non blocking read and write.
	rw := bufio.NewReadWriter(bufio.NewReader(s), bufio.NewWriter(s))

	go readData(rw)
	go writeData(rw)

	// stream 's' will stay open until you close it (or the other side closes it).
}

func readData(rw *bufio.ReadWriter) {
	for {
		str, _ := rw.ReadString('\n')

		if str == "" {
			return
		}
		if str != "\n" {
			// Green console colour: 	\x1b[32m
			// Reset console colour: 	\x1b[0m
			fmt.Printf("\x1b[32m%s\x1b[0m> ", str)
		}
	}
}

func writeData(rw *bufio.ReadWriter) {
	stdReader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("> ")
		sendData, err := stdReader.ReadString('\n')

		if err != nil {
			panic(err)
		}

		rw.WriteString(fmt.Sprintf("%s\n", sendData))
		rw.Flush()
	}
}

// This function will try to get system's public IP address via ip.cip.cc
// It returns the one of public IP addresses and any error encountered.
func getPublicIP() (*string, error) {
	logrus.Info("Finding public IP address...")
	res, err := http.Get("http://ip.cip.cc/")
	if err != nil {
		logrus.Fatal(err)
		return nil, err
	}
	defer res.Body.Close()

	if res.Status != "200 OK" {
		logrus.Fatal(err)
		return nil, err
	}

	body, _ := ioutil.ReadAll(res.Body)
	ip := strings.TrimSpace(string(body))
	return &ip, nil
}

// This function announce self to a public tracker
// It returns the corresponding share ID generated by tracker and any error encountered.
func announceToTracker(trackerURL *string, request *trackerAnnounceRequest) (*trackerAnnounceResponse, error) {
	logrus.Info("Announcing to tracker at: %s", *trackerURL)

	requestJSON, _ := json.Marshal(request)
	logrus.Debug("JSON: ", string(requestJSON))
	req, err := http.NewRequest("POST", *trackerURL, bytes.NewBuffer(requestJSON))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json;charset=utf-8")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	if resp.Status != "200 OK" {
		logrus.Error("Tracker error")
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	logrus.Debug("response Body:", string(body))

	res := trackerAnnounceResponse{}
	err = json.Unmarshal(body, &res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

// This function get peer info by share ID on public tracker
// It returns the requested peer info on tracker and any error encountered.
func getPeerInfo(request *trackerPushRequest, trackerURL *string) (*trackerPushResponse, error) {
	logrus.Infof("Connecting to %s via %s", (*request).ShareID, *trackerURL)
	// todo: post "push" action to tracker

	return nil, nil
}

func main() {
	connect := flag.String("connect", "", "Connect to peer by share ID")
	trackerURL := flag.String("tracker", "", "Full tracker URL string")
	debug := flag.Bool("debug", false, "Debug")
	help := flag.Bool("help", false, "Display help")
	flag.Parse()

	if *help {
		fmt.Println("Usage: Run './chat -tracker <TRACKER_URL>' to announce yourself to tracker.")
		fmt.Println("       Run './chat -connect <SHARE_ID> -tracker <TRACKER_URL>' to connect to a peer via tracker")
		os.Exit(0)
	}

	// setup log
	logrus.SetOutput(os.Stdout)
	Formatter := &logrus.TextFormatter{
		EnvironmentOverrideColors: true,
		FullTimestamp:             true,
		TimestampFormat:           "2020-02-27 00:43:00",
	}
	logrus.SetFormatter(Formatter)
	logrus.SetLevel(logrus.InfoLevel)
	if *debug {
		logrus.SetLevel(logrus.DebugLevel)
	}

	// Creates a new RSA key pair for this host.
	var r io.Reader = rand.Reader
	prvKey, _, err := crypto.GenerateKeyPairWithReader(crypto.RSA, 2048, r)
	if err != nil {
		panic(err)
	}

	// 0.0.0.0 will listen on any interface device.
	sourceMultiAddr, _ := multiaddr.NewMultiaddr("/ip4/0.0.0.0/tcp/0")

	// libp2p.New constructs a new libp2p Host.
	// Other options can be added here.
	host, err := libp2p.New(
		context.Background(),
		libp2p.ListenAddrs(sourceMultiAddr),
		libp2p.Identity(prvKey),
	)
	if err != nil {
		panic(err)
	}

	if *connect == "" {
		// Set a function as stream handler.
		// This function is called when a peer connects, and starts a stream with this protocol.
		// Only applies on the receiving side.
		host.SetStreamHandler("/chat/1.0.0", handleStream)

		// Let's get the actual TCP port from our listen multiaddr, in case we're using 0 (default; random available port).
		var port string
		for _, la := range host.Network().ListenAddresses() {
			if p, err := la.ValueForProtocol(multiaddr.P_TCP); err == nil {
				port = p
				break
			}
		}

		if port == "" {
			panic("was not able to find actual local port")
		}

		publicIP, err := getPublicIP()
		if err != nil {
			logrus.Debug(err)
		}
		request := &trackerAnnounceRequest{
			IP:        *publicIP,
			Port:      port,
			Multiaddr: host.ID().Pretty(),
			Action:    "announce",
		}
		res, err := announceToTracker(trackerURL, request)
		if err != nil {
			// todo: retry
			panic(err)
		}

		logrus.Info("Run './chat -connect %s -tracker %s' on another console.\n", res.Data.ShareID, trackerURL)

		// Hang forever
		<-make(chan struct{})
	} else {
		logrus.Debug("This node's multiaddresses:")
		for _, la := range host.Addrs() {
			logrus.Debug(" - %v\n", la)
		}

		request := &trackerPushRequest{
			ShareID: *connect,
			Action:  "push",
		}
		info, err := getPeerInfo(request, trackerURL)
		if err != nil {
			logrus.Errorf("Cannot get peer `%s` from %s", *connect, *trackerURL)
		} else {
			fmt.Println(info)
			logrus.Debug("Peer Info", info)
		}

		//// Turn the destination into a multiaddr.
		//maddr, err := multiaddr.NewMultiaddr(*dest)
		//if err != nil {
		//	log.Fatalln(err)
		//}
		//
		//// Extract the peer ID from the multiaddr.
		//info, err := peer.AddrInfoFromP2pAddr(maddr)
		//if err != nil {
		//	log.Fatalln(err)
		//}
		//
		//// Add the destination's peer multiaddress in the peerstore.
		//// This will be used during connection and stream creation by libp2p.
		//host.Peerstore().AddAddrs(info.ID, info.Addrs, peerstore.PermanentAddrTTL)
		//
		//// Start a stream with the destination.
		//// Multiaddress of the destination peer is fetched from the peerstore using 'peerId'.
		//s, err := host.NewStream(context.Background(), info.ID, "/chat/1.0.0")
		//if err != nil {
		//	panic(err)
		//}
		//
		//// Create a buffered stream so that read and writes are non blocking.
		//rw := bufio.NewReadWriter(bufio.NewReader(s), bufio.NewWriter(s))
		//
		//// Create a thread to read and write data.
		//go writeData(rw)
		//go readData(rw)
		//
		//// Hang forever.
		//select {}
	}
}
